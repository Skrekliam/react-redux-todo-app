{"version":3,"sources":["features/todoSlice.js","components/input.js","components/TodoItem.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todoList","item","done","id","reducers","saveTodo","state","action","push","payload","setCheck","map","actions","selectTodoList","todo","Input","useState","input","setInput","dispatch","useDispatch","className","type","value","onChange","e","target","placeholder","onClick","console","log","Date","now","TodoItem","Checkbox","checked","inputProps","App","useSelector","store","configureStore","reducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAmBMA,EAAYC,YAAY,CAC5BC,KAAM,QACNC,aAjBmB,CACnBC,SAAU,CACR,CACEC,KAAM,6BACNC,MAAM,EACNC,GAAI,YAEN,CACEF,KAAM,oBACNC,MAAM,EACNC,GAAI,cAQRC,SAAU,CACRC,SAAU,SAACC,EAAOC,GAChBD,EAAMN,SAASQ,KAAKD,EAAOE,UAE7BC,SAAU,SAACJ,EAAOC,GAChBD,EAAMN,SAASW,KAAI,SAACV,GACdM,EAAOE,UAAYR,EAAKE,KAC1BF,EAAKC,MAAQD,EAAKC,a,EAOUN,EAAUgB,QAAjCP,E,EAAAA,SAAUK,E,EAAAA,SAEZG,EAAiB,SAACP,GAAD,OAAWA,EAAMQ,KAAKd,UAErCJ,IAAf,Q,OCRemB,EA1BD,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACXC,EADW,KACJC,EADI,KAEZC,EAAWC,cAWjB,OACE,sBAAKC,UAAU,QAAf,UACE,uBACEC,KAAK,OACLC,MAAON,EACPO,SAAU,SAACC,GAAD,OAAOP,EAASO,EAAEC,OAAOH,QACnCI,YAAY,wBAEd,wBAAQC,QAjBI,WACdC,QAAQC,IAAR,iBAAsBb,IAEtBE,EAASd,EAAS,CACdJ,KAAMgB,EACNf,MAAM,EACNC,GAAI4B,KAAKC,UAWX,sB,gBCCSC,EArBE,SAAC,GAAwB,IAAtBnC,EAAqB,EAArBA,KAAMI,EAAe,EAAfA,KAAMC,EAAS,EAATA,GACtBgB,EAAWC,cAOnB,OACE,sBAAKC,UAAU,WAAf,UACE,cAACa,EAAA,EAAD,CACEC,QAASjC,EACTsB,SATiB,WACjBL,EAAST,EAASP,KASlBiC,WAAY,CAAE,aAAc,sBAG9B,mBAAGf,UAAWnB,GAAQ,iBAAtB,SAAyCJ,QCQhCuC,MAtBf,WACE,IAAMrC,EAAWsC,YAAYzB,GAC7B,OACE,qBAAKQ,UAAU,MAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,qBAAKA,UAAU,qBAAf,SACGrB,EAASW,KAAI,SAAAV,GAAI,OAChB,cAAC,EAAD,CACAH,KAAMG,EAAKA,KACXC,KAAMD,EAAKC,KACXC,GAAIF,EAAKE,IACJF,EAAKE,SAId,cAAC,EAAD,UCrBKoC,EAAQC,YAAe,CAClCC,QAAS,CACP3B,KAAM4B,KCOUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.454ac14c.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// cpnst [todoList, setTodoList] = useState([])\r\n\r\nconst initialState = {\r\n  todoList: [\r\n    {\r\n      item: \"Say hello to a new visitor\",\r\n      done: false,\r\n      id: 1436587432,\r\n    },\r\n    {\r\n      item: \"Publish to Github\",\r\n      done: true,\r\n      id: 1436587686,\r\n    },\r\n  ],\r\n};\r\n\r\nconst todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState,\r\n  reducers: {\r\n    saveTodo: (state, action) => {\r\n      state.todoList.push(action.payload);\r\n    },\r\n    setCheck: (state, action) => {\r\n      state.todoList.map((item) => {\r\n        if (action.payload === item.id) {\r\n          item.done = !item.done;\r\n        }\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\nexport const { saveTodo, setCheck } = todoSlice.actions;\r\n\r\nexport const selectTodoList = (state) => state.todo.todoList;\r\n\r\nexport default todoSlice.reducer;\r\n","import React, { useState } from \"react\";\r\nimport \"./input.css\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport {saveTodo} from \"../features/todoSlice\";\r\n\r\nconst Input = () => {\r\n  const [input, setInput] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const addTodo = () => {\r\n    console.log(`Adding ${input}`);\r\n\r\n    dispatch(saveTodo({\r\n        item: input,\r\n        done: false,\r\n        id: Date.now()\r\n    }));\r\n  };\r\n  return (\r\n    <div className=\"input\">\r\n      <input\r\n        type=\"text\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        placeholder=\"Enter new task here\"\r\n      />\r\n      <button onClick={addTodo}>Add!</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport \"./TodoItem.css\";\r\nimport {Checkbox} from '@material-ui/core'\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setCheck } from \"../features/todoSlice\";\r\n\r\n\r\nconst TodoItem = ({ name, done, id }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = () => {\r\n        dispatch(setCheck(id))\r\n    }\r\n    \r\n\r\n  return (\r\n    <div className=\"todoItem\">\r\n      <Checkbox\r\n        checked={done}\r\n        onChange={handleChange}\r\n        inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n      />\r\n\r\n      <p className={done && \"todoItem--done\"}>{name}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./App.css\";\nimport Input from \"./components/input\";\nimport TodoItem from \"./components/TodoItem\";\nimport { selectTodoList } from \"./features/todoSlice\";\n\n\n\nfunction App() {\n  const todoList = useSelector(selectTodoList);\n  return (\n    <div className=\"App\">\n      <div className=\"app__container\">\n        <div className=\"app__todoContainer\">\n          {todoList.map(item=>(\n            <TodoItem \n            name={item.item}\n            done={item.done}\n            id={item.id}\n            key={item.id}\n            />\n          ))}\n        </div>\n        <Input />\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport todoReducer from \"../features/todoSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    todo: todoReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}